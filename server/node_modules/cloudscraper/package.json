{
  "_args": [
    [
      {
        "raw": "cloudscraper@1.4.1",
        "scope": null,
        "escapedName": "cloudscraper",
        "name": "cloudscraper",
        "rawSpec": "1.4.1",
        "spec": "1.4.1",
        "type": "version"
      },
      "E:\\React\\redux-boiler\\server\\node_modules\\ccxt"
    ]
  ],
  "_from": "cloudscraper@1.4.1",
  "_id": "cloudscraper@1.4.1",
  "_inCache": true,
  "_location": "/cloudscraper",
  "_nodeVersion": "4.2.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/cloudscraper-1.4.1.tgz_1477844834756_0.6102830665186048"
  },
  "_npmUser": {
    "name": "codemanki",
    "email": "me@codemanki.com"
  },
  "_npmVersion": "3.8.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cloudscraper@1.4.1",
    "scope": null,
    "escapedName": "cloudscraper",
    "name": "cloudscraper",
    "rawSpec": "1.4.1",
    "spec": "1.4.1",
    "type": "version"
  },
  "_requiredBy": [
    "/ccxt"
  ],
  "_resolved": "https://registry.npmjs.org/cloudscraper/-/cloudscraper-1.4.1.tgz",
  "_shasum": "f2b4431f317286d819b1357266ca3463b112ebca",
  "_shrinkwrap": null,
  "_spec": "cloudscraper@1.4.1",
  "_where": "E:\\React\\redux-boiler\\server\\node_modules\\ccxt",
  "author": {
    "name": "Oleksii Sribnyi"
  },
  "bugs": {
    "url": "https://github.com/codemanki/cloudscraper/issues"
  },
  "dependencies": {
    "request": "^2.49.0"
  },
  "description": "Bypasses cloudflare's anti-ddos page",
  "devDependencies": {
    "chai": "^1.10.0",
    "grunt": "^0.4.5",
    "grunt-mocha-test": "^0.12.4",
    "mocha": "^2.0.1",
    "sinon": "^1.12.1"
  },
  "directories": {},
  "dist": {
    "shasum": "f2b4431f317286d819b1357266ca3463b112ebca",
    "tarball": "https://registry.npmjs.org/cloudscraper/-/cloudscraper-1.4.1.tgz"
  },
  "gitHead": "e250b0531cd69f0d675d830f9cf3a0159f842ce5",
  "homepage": "https://github.com/codemanki/cloudscraper",
  "keywords": [
    "cloudflare",
    "ddos",
    "scrape",
    "webscraper"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "codemanki",
      "email": "me@codemanki.com"
    }
  ],
  "name": "cloudscraper",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "http://registry.npmjs.org"
  },
  "readme": "cloudscraper\n============\n\nNode.js library to bypass cloudflare's anti-ddos page.\n\nThis library is a port of python module [cloudflare-scrape](https://github.com/Anorov/cloudflare-scrape) with couple enhancements and test cases ;)\n. All grats to its author \\m/\n\nIf the page you want to access is protected by CloudFlare, it will return special page, which expects client to support Javascript to solve challenge.\n\nThis small library encapsulates logic which extracts challenge, solves it, submits and returns the request page body.\n\nYou can use cloudscraper even if you are not sure if CloudFlare protection is turned on.\n\nIn general, CloudFlare has 4 types of _common_ anti-bot pages:\n  - Simple html+javascript page with challenge\n  - Page which redirects to original site\n  - Page with recaptcha\n  - Page with error ( your ip was banned, etc)\n\n__Unfortunatelly there is no solution, if website is protected by captcha.__\n\nIf you notice that for some reason cloudscraper stopped to work, do not hesitate and get in touch with me ( by creating an issue here, for example), so i can update it.\n\nInstall\n============\n```javascript\nnpm install cloudscraper\n```\n\nUsage\n============\n```javascript\nvar cloudscraper = require('cloudscraper');\n\ncloudscraper.get('http://website.com/', function(error, response, body) {\n  if (error) {\n    console.log('Error occurred');\n  } else {\n    console.log(body, response);\n  }\n});\n```\n\nor for `POST` action:\n\n```javascript\ncloudscraper.post('http://website.com/', {field1: 'value', field2: 2}, function(error, response, body) {\n  ...\n});\n```\n\nA generic request can be made with `cloudscraper.request(options, callback)`. The options object should follow [request's options](https://www.npmjs.com/package/request#request-options-callback). Not everything is supported however, for example http methods other than GET and POST. If you wanted to request an image in binary data you could use the encoding option:\n\n```javascript\ncloudscraper.request({method: 'GET',\n                      url:'http://website.com/image',\n                      encoding: null,\n                      }, function(err, response, body) {\n                      //body is now a buffer object instead of a string\n});\n```\n\n##Error object\nError object has following structure:\n```\nvar error = {errorType: 0, error:...};\n```\n\nWhere `errorType` can be following:\n - `0` if request to page failed due to some native reason as bad url, http connection or so. `error` in this case will be error [event](http://nodejs.org/api/http.html#http_class_http_server)\n - `1` cloudflare returned captcha. Nothing to do here. Bad luck\n - `2` cloudflare returned page with some inner error. `error` will be `Number` within this range `1012, 1011, 1002, 1000, 1004, 1010, 1006, 1007, 1008`. See more [here](https://support.cloudflare.com/hc/en-us/sections/200038216-CloudFlare-Error-Messages)\n - `3` this error is returned when library failed to parse and solve js challenge. `error` will be `String` with some details. :warning: :warning: __Most likely it means that cloudflare have changed their js challenge.__\n\n\nRunning tests\n============\nClone this repo, do `npm install` and then just `grunt`\n\n### Unknown error? Library stopped working? ###\nLet me know, by opening [issue](https://github.com/codemanki/cloudscraper/issues) in this repo and i will update library asap. Please, provide url and body of page where cloudscraper failed.\n\n\nCloudScraper uses [Request](https://github.com/request/request) to perform requests.\n\nWAT\n===========\nCurrent cloudflare implementation requires browser to respect the timeout of 5 seconds and cloudscraper mimics this behaviour. So everytime you call `cloudscraper.get` you should expect it to return result after min 6 seconds.\n\n## TODO\n - [x] Check for recaptcha\n - [ ] Support cookies, so challenge can be solved once per session\n - [x] Support page with simple redirects\n - [x] Add proper testing\n\n## Kudos to contributors\n - [roflmuffin](https://github.com/roflmuffin)\n - [Colecf](https://github.com/Colecf)\n - [Jeongbong Seo](https://github.com/jngbng)\n\n## Dependencies\n* request@2.49.0 https://github.com/request/request\n* tough-cookie@0.12.1 https://github.com/goinstant/tough-cookie\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/codemanki/cloudscraper.git"
  },
  "scripts": {
    "test": "grunt"
  },
  "version": "1.4.1"
}
